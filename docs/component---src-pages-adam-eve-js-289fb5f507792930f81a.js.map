{"version":3,"sources":["webpack:///./src/pages/adam_eve.js","webpack:///./src/lib/utils.js"],"names":["athleteTotals","data","allResultsCsv","edges","map","node","reduce","a","c","athlete","find","ath","fields","athlete_slug","Total","parseFloat","Distance","toFixed","push","sort","compareTotals","columns","Header","accessor","width","id","d","to","athlete_name","defaultPageSize","className","query","b","compareRaceDates","Date","compareTimes","as","Time","split","bs","length","i","aa","parseInt","bb"],"mappings":"2PAOe,sBAAe,IAKtBA,EALqB,EAAXC,KAERC,cAAiBC,MACAC,KAAI,qBAAGC,QAECC,QAAO,SAACC,EAAGC,GAC1C,IAAMC,EAAUF,EAAEG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,OAAOC,eAAiBL,EAAEI,OAAOC,gBAWnE,OATIJ,EACFA,EAAQK,OAASC,WAAWN,EAAQK,MAAO,IAAMC,WAAWP,EAAEQ,SAAU,KAAKC,QAAQ,GAErFV,EAAEW,KAAF,iBACKV,EADL,CAEEM,MAAOC,WAAWP,EAAEQ,SAAU,OAI3BT,IACN,IAEH,OACE,kBAAC,IAAD,KACE,oDACA,kBAAC,IAAD,CACEN,KAAMD,EAAcmB,KAAKC,KACzBC,QAAS,CACP,CACEC,OAAQ,WACRC,SAAU,QACVC,MAAO,IAET,CACEF,OAAQ,OACRG,GAAI,OACJF,SAAU,SAAAG,GAAC,OAAI,kBAAC,IAAD,CAAMC,GAAE,IAAMD,EAAEd,OAAOC,cAAiBa,EAAEd,OAAOgB,eAChEJ,MAAO,MAGXK,gBAAiB,GACjBC,UAAU,0BAMX,IAAMC,EAAK,c,gKC9CLX,EAAgB,SAACb,EAAGyB,GAC/B,OAAIjB,WAAWR,EAAEO,MAAO,IAAMC,WAAWiB,EAAElB,MAAO,IACzC,EAELC,WAAWR,EAAEO,MAAO,IAAMC,WAAWiB,EAAElB,MAAO,KACxC,EAEH,GAGImB,EAAmB,SAAC1B,EAAGyB,GAClC,OAAIzB,EAAE,GAAG2B,KAAOF,EAAE,GAAGE,MACX,EAEN3B,EAAE,GAAG2B,KAAOF,EAAE,GAAGE,KACZ,EAEF,GAaIC,EAAe,SAAC5B,EAAGyB,GAC9B,IAAMI,EAAK7B,EAAE8B,KAAKC,MAAM,KAClBC,EAAKP,EAAEK,KAAKC,MAAM,KACxB,GAAIF,EAAGI,SAAWD,EAAGC,OAAQ,OAAOJ,EAAGI,OAASD,EAAGC,OAEnD,IAAK,IAAIC,EAAI,EAAGA,EAAGL,EAAGI,OAAQC,IAAK,CACjC,IAAIC,EAAKC,SAASP,EAAGK,IACjBG,EAAKD,SAASJ,EAAGE,IACrB,GAAIC,IAAOE,EAAI,OAAOF,EAAKE,EAE7B,OAAO","file":"component---src-pages-adam-eve-js-289fb5f507792930f81a.js","sourcesContent":["import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport \"react-table/react-table.css\"\nimport ReactTable from \"react-table\"\nimport { compareTotals } from '../lib/utils';\n\nexport default ({ data }) => {\n\n  const { allResultsCsv: { edges } } = data\n  const allResults = edges.map(({ node }) => node);\n\n  const athleteTotals = allResults.reduce((a, c) => {\n    const athlete = a.find(ath => ath.fields.athlete_slug === c.fields.athlete_slug);\n\n    if (athlete) {\n      athlete.Total = (parseFloat(athlete.Total, 10) + parseFloat(c.Distance, 10)).toFixed(1);\n    } else {\n      a.push({\n        ...c,\n        Total: parseFloat(c.Distance, 10),\n      });\n    }\n\n    return a;\n  }, []);\n\n  return (\n    <Layout>\n      <h1>Adam & Eve Standings</h1>\n      <ReactTable\n        data={athleteTotals.sort(compareTotals)}\n        columns={[\n          {\n            Header: \"Distance\",\n            accessor: \"Total\",\n            width: 80\n          },\n          {\n            Header: \"Name\",\n            id: \"Name\",\n            accessor: d => <Link to={`/${d.fields.athlete_slug}`}>{d.fields.athlete_name}</Link>,\n            width: 200\n          }\n        ]}\n        defaultPageSize={15}\n        className=\"-striped -highlight\"\n      />\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n{\n  allResultsCsv {\n    edges {\n      node {\n        Distance\n        Firstname\n        Surname\n        fields {\n          athlete_name\n          athlete_slug\n        }\n      }\n    }\n  }\n}`\n","export const toTitleCase = (str) =>\n  str.replace(\n    /([^\\W_]+[^\\s-]*) */g,\n    (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n  );\n\nexport const compareTotals = (a, b) => {\n  if (parseFloat(a.Total, 10) < parseFloat(b.Total, 10)) {\n    return 1;\n  }\n  if (parseFloat(a.Total, 10) > parseFloat(b.Total, 10)) {\n    return -1;\n  }\n  return 0;\n};\n\nexport const compareRaceDates = (a, b) => {\n  if (a[0].Date < b[0].Date) {\n    return -1;\n  }\n  if (a[0].Date > b[0].Date) {\n    return 1;\n  }\n  return 0;\n};\n\nexport const compareStrings = (field) => (a, b) => {\n  if (a[field] < b[field]) {\n    return -1;\n  }\n  if (a[field] > b[field]) {\n    return 1;\n  }\n  return 0;\n};\n\nexport const compareTimes = (a, b) => {\n  const as = a.Time.split('.');\n  const bs = b.Time.split('.');\n  if (as.length !== bs.length) return as.length - bs.length;\n\n  for (let i = 0; i< as.length; i++) {\n    let aa = parseInt(as[i]);\n    let bb = parseInt(bs[i]);\n    if (aa !== bb) return aa - bb;\n  }\n  return 0;\n};\n\nexport const toSlug = (str) => str.replace(/ /g, '_');\n\n"],"sourceRoot":""}