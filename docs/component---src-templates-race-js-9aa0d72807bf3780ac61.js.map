{"version":3,"sources":["webpack:///./src/templates/race.js","webpack:///./src/components/race_report.js","webpack:///./src/lib/utils.js"],"names":["data","allResultsCsv","nodes","Description","Date","Discipline","Distance","raceResults","map","result","Category_Position","Firstname","Gender","Surname","Time","fields","slug","athlete_slug","Category","Name","to","race","sort","compareTimes","columns","Header","id","accessor","d","width","defaultSorted","desc","defaultPageSize","className","query","RaceReport","firstMale","find","a","firstFemale","topTen","filter","r","style","padding","length","key","compareTotals","b","parseFloat","Total","compareRaceDates","as","split","bs","i","aa","parseInt","bb"],"mappings":"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","file":"component---src-templates-race-js-9aa0d72807bf3780ac61.js","sourcesContent":["import React from 'react';\nimport Layout from '../components/layout';\nimport { Link, graphql } from 'gatsby';\nimport ReactTable from 'react-table';\nimport 'react-table/react-table.css';\nimport { compareTimes } from '../lib/utils';\nimport RaceReport from '../components/race_report';\n\nexport default ({ data }) => {\n  const { Description, Date, Discipline, Distance } = data.allResultsCsv.nodes[0];\n\n  const raceResults = data.allResultsCsv.nodes.map(result => {\n    const { Category_Position, Firstname, Gender, Surname, Time, fields: { athlete_slug: slug, Category } } = result;\n    return {  Description, Date, Discipline, Distance, Category, Category_Position, Surname, Firstname, Gender, Time,  Name: `${Firstname} ${Surname}`, slug, fields: { Category } };\n  });\n\n  return (\n    <Layout>\n      <Link to=\"/races/\">Races</Link>\n      <RaceReport race={raceResults} />\n\n      <ReactTable\n        data={raceResults.sort(compareTimes)}\n        columns={[\n          {\n            Header: \"Name\",\n            id: \"Name\",\n            accessor: d => <Link to={`/${d.slug}`}>{d.Name}</Link>,\n            width: 250\n          },\n          {\n            Header: \"Time\",\n            accessor: \"Time\",\n            width: 150\n          },\n          {\n            Header: \"Category\",\n            accessor: \"Category\",\n            width: 100\n          },\n          {\n            Header: \"Category Position\",\n            accessor: \"Category_Position\",\n            width: 200\n          }\n        ]}\n        defaultSorted={[\n          {\n            id: \"Time\",\n            desc: false\n          }\n        ]}\n        defaultPageSize={15}\n        className=\"-striped -highlight\"\n      />\n    </Layout>\n  );\n};\n\n\nexport const query = graphql`\nquery($slug: String!) {\n  allResultsCsv(filter: {fields: {race_slug: {eq: $slug}}}) {\n    nodes {\n      Category_Position\n      Date(formatString: \"\")\n      Description\n      Discipline\n      Distance\n      Firstname\n      Gender\n      Surname\n      Time\n      fields {\n        athlete_slug\n        Category\n      }\n    }\n  }\n}`;\n","import PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\n\nconst RaceReport = ({ race }) => {\n  const { Description, Date, Discipline, Distance } = race[0];\n  const firstMale = race.find(a => a.Gender === 'M');\n  const firstFemale = race.find(a => a.Gender === 'F');\n\n  const topTen = race.filter(r => r.Category_Position && r.Category_Position <= 10);\n\n  return (\n    <Fragment>\n      <div style={{ padding: '10px' }}>\n        <h2>{Date} - {Description} {Distance}km {Discipline}</h2>\n\n        <div>{race.length} Pinelands athlete{race.length > 1 ? 's' : ''}</div>\n        <div style={{ padding: '7px' }}>\n          {firstMale &&\n          <div>First male athlete: {firstMale.Firstname} {firstMale.Surname}  ({firstMale.Time})</div>\n          }\n          {firstFemale &&\n          <div>First female athlete: {firstFemale.Firstname} {firstFemale.Surname} ({firstFemale.Time})</div>\n          }\n        </div>\n        {topTen.map(r => (\n          <div\n            key={r.Firstname}>{r.Firstname} {r.Surname} placed {r.Category_Position} {r.fields.Category} ({r.Time})</div>\n        ))}\n      </div>\n    </Fragment>\n  )\n};\n\nRaceReport.propTypes = {\n  race: PropTypes.arrayOf(\n    PropTypes.shape({\n      Description: PropTypes.string.isRequired,\n      Distance: PropTypes.string.isRequired,\n      Discipline: PropTypes.string.isRequired,\n      Date: PropTypes.string.isRequired,\n      Surname: PropTypes.string.isRequired,\n      Firstname: PropTypes.string.isRequired,\n      Time: PropTypes.string.isRequired,\n      Gender: PropTypes.string,\n      Category: PropTypes.string,\n      Category_Position: PropTypes.string,\n  })).isRequired,\n};\n\nexport default RaceReport;\n","export const toTitleCase = (str) =>\n  str.replace(\n    /([^\\W_]+[^\\s-]*) */g,\n    (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n  );\n\nexport const compareTotals = (a, b) => {\n  if (parseFloat(a.Total, 10) < parseFloat(b.Total, 10)) {\n    return 1;\n  }\n  if (parseFloat(a.Total, 10) > parseFloat(b.Total, 10)) {\n    return -1;\n  }\n  return 0;\n};\n\nexport const compareRaceDates = (a, b) => {\n  if (a[0].Date < b[0].Date) {\n    return -1;\n  }\n  if (a[0].Date > b[0].Date) {\n    return 1;\n  }\n  return 0;\n};\n\nexport const compareStrings = (field) => (a, b) => {\n  if (a[field] < b[field]) {\n    return -1;\n  }\n  if (a[field] > b[field]) {\n    return 1;\n  }\n  return 0;\n};\n\nexport const compareTimes = (a, b) => {\n  const as = a.Time.split('.');\n  const bs = b.Time.split('.');\n  if (as.length !== bs.length) return as.length - bs.length;\n\n  for (let i = 0; i< as.length; i++) {\n    let aa = parseInt(as[i]);\n    let bb = parseInt(bs[i]);\n    if (aa !== bb) return aa - bb;\n  }\n  return 0;\n};\n\nexport const toSlug = (str) => str.replace(/ /g, '_');\n\n"],"sourceRoot":""}